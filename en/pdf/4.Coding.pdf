%PDF-1.4
%“Œ‹ž ReportLab Generated PDF document http://www.reportlab.com
1 0 obj
<< /F1 2 0 R /F2 3 0 R /F3 5 0 R /F4 7 0 R >>
endobj
2 0 obj
<< /BaseFont /Helvetica /Encoding /WinAnsiEncoding /Name /F1 /Subtype /Type1 /Type /Font >>
endobj
3 0 obj
<< /BaseFont /Helvetica-Bold /Encoding /WinAnsiEncoding /Name /F2 /Subtype /Type1 /Type /Font >>
endobj
4 0 obj
<< /Contents 30 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 29 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
5 0 obj
<< /BaseFont /Helvetica-Oblique /Encoding /WinAnsiEncoding /Name /F3 /Subtype /Type1 /Type /Font >>
endobj
6 0 obj
<< /Contents 31 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 29 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
7 0 obj
<< /BaseFont /Courier /Encoding /WinAnsiEncoding /Name /F4 /Subtype /Type1 /Type /Font >>
endobj
8 0 obj
<< /A << /S /URI /Type /Action /URI (http://lwn.net/Articles/243460/) >> /Border [ 0 0 0 ] /Rect [ 66.02291 412.5736 197.2029 424.5736 ] /Subtype /Link /Type /Annot >>
endobj
9 0 obj
<< /Annots [ 8 0 R ] /Contents 32 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 29 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 
  /Trans <<  >> /Type /Page >>
endobj
10 0 obj
<< /A << /S /URI /Type /Action /URI (https://sparse.wiki.kernel.org/index.php/Main_Page) >> /Border [ 0 0 0 ] /Rect [ 62.69291 273.7736 292.4611 285.7736 ] /Subtype /Link /Type /Annot >>
endobj
11 0 obj
<< /A << /S /URI /Type /Action /URI (http://coccinelle.lip6.fr/) >> /Border [ 0 0 0 ] /Rect [ 162.0089 243.7736 260.9389 255.7736 ] /Subtype /Link /Type /Annot >>
endobj
12 0 obj
<< /A << /S /URI /Type /Action /URI (http://www.kernel.org/pub/tools/crosstool/) >> /Border [ 0 0 0 ] /Rect [ 82.69291 135.7736 532.5827 147.7736 ] /Subtype /Link /Type /Annot >>
endobj
13 0 obj
<< /Annots [ 10 0 R 11 0 R 12 0 R ] /Contents 33 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 29 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 
  /Trans <<  >> /Type /Page >>
endobj
14 0 obj
<< /Contents 34 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 29 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
15 0 obj
<< /Contents 35 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 29 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
16 0 obj
<< /Outlines 18 0 R /PageLabels 36 0 R /PageMode /UseNone /Pages 29 0 R /Type /Catalog >>
endobj
17 0 obj
<< /Author () /CreationDate (D:20170628151523-08'00') /Creator (\(unspecified\)) /Keywords () /Producer (ReportLab PDF Library - www.reportlab.com) /Subject (\(unspecified\)) 
  /Title (Getting the code right) >>
endobj
18 0 obj
<< /Count 11 /First 19 0 R /Last 28 0 R /Type /Outlines >>
endobj
19 0 obj
<< /Count 6 /Dest [ 4 0 R /XYZ 62.69291 629.0236 0 ] /First 20 0 R /Last 25 0 R /Next 26 0 R /Parent 18 0 R 
  /Title (Pitfalls) >>
endobj
20 0 obj
<< /Dest [ 4 0 R /XYZ 62.69291 596.0236 0 ] /Next 21 0 R /Parent 19 0 R /Title (Coding style) >>
endobj
21 0 obj
<< /Dest [ 4 0 R /XYZ 62.69291 260.0236 0 ] /Next 22 0 R /Parent 19 0 R /Prev 20 0 R /Title (Abstraction layers) >>
endobj
22 0 obj
<< /Dest [ 6 0 R /XYZ 62.69291 663.0236 0 ] /Next 23 0 R /Parent 19 0 R /Prev 21 0 R /Title (#ifdef and preprocessor use in general) >>
endobj
23 0 obj
<< /Dest [ 6 0 R /XYZ 62.69291 447.0236 0 ] /Next 24 0 R /Parent 19 0 R /Prev 22 0 R /Title (Inline functions) >>
endobj
24 0 obj
<< /Dest [ 6 0 R /XYZ 62.69291 243.0236 0 ] /Next 25 0 R /Parent 19 0 R /Prev 23 0 R /Title (Locking) >>
endobj
25 0 obj
<< /Dest [ 9 0 R /XYZ 62.69291 627.0236 0 ] /Parent 19 0 R /Prev 24 0 R /Title (Regressions) >>
endobj
26 0 obj
<< /Dest [ 9 0 R /XYZ 62.69291 333.8236 0 ] /Next 27 0 R /Parent 18 0 R /Prev 19 0 R /Title (Code checking tools) >>
endobj
27 0 obj
<< /Dest [ 14 0 R /XYZ 62.69291 765.0236 0 ] /Next 28 0 R /Parent 18 0 R /Prev 26 0 R /Title (Documentation) >>
endobj
28 0 obj
<< /Dest [ 14 0 R /XYZ 62.69291 264.0236 0 ] /Parent 18 0 R /Prev 27 0 R /Title (Internal API changes) >>
endobj
29 0 obj
<< /Count 6 /Kids [ 4 0 R 6 0 R 9 0 R 13 0 R 14 0 R 15 0 R ] /Type /Pages >>
endobj
30 0 obj
<< /Length 6081 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 741.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 4 Tm /F2 20 Tf 24 TL 131.0449 0 Td (Getting the code right) Tj T* -131.0449 0 Td ET
Q
Q
q
1 0 0 1 62.69291 683.0236 cm
q
BT 1 0 0 1 0 38 Tm .260542 Tw 12 TL /F1 10 Tf 0 0 0 rg (While there is much to be said for a solid and community-oriented design process, the proof of any kernel) Tj T* 0 Tw .012765 Tw (development project is in the resulting code. It is the code which will be examined by other developers and) Tj T* 0 Tw 1.095777 Tw (merged \(or not\) into the mainline tree. So it is the quality of this code which will determine the ultimate) Tj T* 0 Tw (success of the project.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 641.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .616303 Tw (This section will examine the coding process. We'll start with a look at a number of ways in which kernel) Tj T* 0 Tw .444431 Tw (developers can go wrong. Then the focus will shift toward doing things right and the tools which can help) Tj T* 0 Tw (in that quest.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 608.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Pitfalls) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 578.0236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Coding style) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 512.0236 cm
q
BT 1 0 0 1 0 50 Tm 19.75298 Tw 12 TL /F1 10 Tf 0 0 0 rg (The kernel has long had a standard coding style, described in) Tj T* 0 Tw .523307 Tw 1 0 0 rg (:ref:`Documentation/process/coding-style.rst <) Tj (codingstyle) Tj (>) Tj (`) Tj 0 0 0 rg (. For much of that time, the policies described) Tj T* 0 Tw .221894 Tw (in that file were taken as being, at most, advisory. As a result, there is a substantial amount of code in the) Tj T* 0 Tw 3.13936 Tw (kernel which does not meet the coding style guidelines. The presence of that code leads to two) Tj T* 0 Tw (independent hazards for kernel developers.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 446.0236 cm
q
BT 1 0 0 1 0 50 Tm .799988 Tw 12 TL /F1 10 Tf 0 0 0 rg (The first of these is to believe that the kernel coding standards do not matter and are not enforced. The) Tj T* 0 Tw .248084 Tw (truth of the matter is that adding new code to the kernel is very difficult if that code is not coded according) Tj T* 0 Tw .242339 Tw (to the standard; many developers will request that the code be reformatted before they will even review it.) Tj T* 0 Tw .275777 Tw (A code base as large as the kernel requires some uniformity of code to make it possible for developers to) Tj T* 0 Tw (quickly understand any part of it. So there is no longer room for strangely-formatted code.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 392.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL 1.393318 Tw (Occasionally, the kernel's coding style will run into conflict with an employer's mandated style. In such) Tj T* 0 Tw 1.418876 Tw (cases, the kernel's style will have to win before the code can be merged. Putting code into the kernel) Tj T* 0 Tw 2.264724 Tw (means giving up a degree of control in a number of ways - including control over how the code is) Tj T* 0 Tw (formatted.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 314.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 62 Tm /F1 10 Tf 12 TL 1.122988 Tw (The other trap is to assume that code which is already in the kernel is urgently in need of coding style) Tj T* 0 Tw 2.091984 Tw (fixes. Developers may start to generate reformatting patches as a way of gaining familiarity with the) Tj T* 0 Tw .121988 Tw (process, or as a way of getting their name into the kernel changelogs - or both. But pure coding style fixes) Tj T* 0 Tw .098409 Tw (are seen as noise by the development community; they tend to get a chilly reception. So this type of patch) Tj T* 0 Tw .944535 Tw (is best avoided. It is natural to fix the style of a piece of code while working on it for other reasons, but) Tj T* 0 Tw (coding style changes should not be made for their own sake.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 272.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .339398 Tw (The coding style document also should not be read as an absolute law which can never be transgressed.) Tj T* 0 Tw .237717 Tw (If there is a good reason to go against the style \(a line which becomes far less readable if split to fit within) Tj T* 0 Tw (the 80-column limit, for example\), just do it.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 242.0236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Abstraction layers) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 176.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL .645318 Tw (Computer Science professors teach students to make extensive use of abstraction layers in the name of) Tj T* 0 Tw 2.370751 Tw (flexibility and information hiding. Certainly the kernel makes extensive use of abstraction; no project) Tj T* 0 Tw 1.572651 Tw (involving several million lines of code could do otherwise and survive. But experience has shown that) Tj T* 0 Tw .618443 Tw (excessive or premature abstraction can be just as harmful as premature optimization. Abstraction should) Tj T* 0 Tw (be used to the level required and no further.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 86.02362 cm
q
0 0 0 rg
BT 1 0 0 1 0 74 Tm /F1 10 Tf 12 TL 1.836098 Tw (At a simple level, consider a function which has an argument which is always passed as zero by all) Tj T* 0 Tw .36186 Tw (callers. One could retain that argument just in case somebody eventually needs to use the extra flexibility) Tj T* 0 Tw 2.444985 Tw (that it provides. By that time, though, chances are good that the code which implements this extra) Tj T* 0 Tw 1.451751 Tw (argument has been broken in some subtle way which was never noticed - because it has never been) Tj T* 0 Tw 2.469461 Tw (used. Or, when the need for extra flexibility arises, it does not do so in a way which matches the) Tj T* 0 Tw 3.084524 Tw (programmer's early expectation. Kernel developers will routinely submit patches to remove unused) Tj T* 0 Tw (arguments; they should, in general, not be added in the first place.) Tj T* ET
Q
Q
 
endstream
endobj
31 0 obj
<< /Length 6160 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 729.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.475251 Tw (Abstraction layers which hide access to hardware - often to allow the bulk of a driver to be used with) Tj T* 0 Tw .313318 Tw (multiple operating systems - are especially frowned upon. Such layers obscure the code and may impose) Tj T* 0 Tw (a performance penalty; they do not belong in the Linux kernel.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 675.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL 3.497318 Tw (On the other hand, if you find yourself copying significant amounts of code from another kernel) Tj T* 0 Tw 1.334274 Tw (subsystem, it is time to ask whether it would, in fact, make sense to pull out some of that code into a) Tj T* 0 Tw 1.354692 Tw (separate library or to implement that functionality at a higher level. There is no value in replicating the) Tj T* 0 Tw (same code throughout the kernel.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 645.0236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (#ifdef and preprocessor use in general) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 591.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .014987 Tw (The C preprocessor seems to present a powerful temptation to some C programmers, who see it as a way) Tj T* 0 Tw .625777 Tw (to efficiently encode a great deal of flexibility into a source file. But the preprocessor is not C, and heavy) Tj T* 0 Tw .673322 Tw (use of it results in code which is much harder for others to read and harder for the compiler to check for) Tj T* 0 Tw (correctness. Heavy preprocessor use is almost always a sign of code which needs some cleanup work.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 525.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL .111163 Tw (Conditional compilation with #ifdef is, indeed, a powerful feature, and it is used within the kernel. But there) Tj T* 0 Tw 1.712765 Tw (is little desire to see code which is sprinkled liberally with #ifdef blocks. As a general rule, #ifdef use) Tj T* 0 Tw 1.513059 Tw (should be confined to header files whenever possible. Conditionally-compiled code can be confined to) Tj T* 0 Tw 1.51881 Tw (functions which, if the code is not to be present, simply become empty. The compiler will then quietly) Tj T* 0 Tw (optimize out the call to the empty function. The result is far cleaner code which is easier to follow.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 459.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL 4.514147 Tw (C preprocessor macros present a number of hazards, including possible multiple evaluation of) Tj T* 0 Tw .601163 Tw (expressions with side effects and no type safety. If you are tempted to define a macro, consider creating) Tj T* 0 Tw .290542 Tw (an inline function instead. The code which results will be the same, but inline functions are easier to read,) Tj T* 0 Tw 1.09186 Tw (do not evaluate their arguments multiple times, and allow the compiler to perform type checking on the) Tj T* 0 Tw (arguments and return value.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 429.0236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Inline functions) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 339.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 74 Tm /F1 10 Tf 12 TL 2.556412 Tw (Inline functions present a hazard of their own, though. Programmers can become enamored of the) Tj T* 0 Tw 1.09186 Tw (perceived efficiency inherent in avoiding a function call and fill a source file with inline functions. Those) Tj T* 0 Tw .423318 Tw (functions, however, can actually reduce performance. Since their code is replicated at each call site, they) Tj T* 0 Tw .097633 Tw (end up bloating the size of the compiled kernel. That, in turn, creates pressure on the processor's memory) Tj T* 0 Tw 1.905984 Tw (caches, which can slow execution dramatically. Inline functions, as a rule, should be quite small and) Tj T* 0 Tw .455988 Tw (relatively rare. The cost of a function call, after all, is not that high; the creation of large numbers of inline) Tj T* 0 Tw (functions is a classic example of premature optimization.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 297.0236 cm
q
BT 1 0 0 1 0 26 Tm .65284 Tw 12 TL /F1 10 Tf 0 0 0 rg (In general, kernel programmers ignore cache effects at their peril. The classic time/space tradeoff taught) Tj T* 0 Tw .013735 Tw (in beginning data structures classes often does not apply to contemporary hardware. Space ) Tj /F3 10 Tf (is ) Tj /F1 10 Tf (time, in that) Tj T* 0 Tw (a larger program will run slower than one which is more compact.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 255.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .053984 Tw (More recent compilers take an increasingly active role in deciding whether a given function should actually) Tj T* 0 Tw .369988 Tw (be inlined or not. So the liberal placement of "inline" keywords may not just be excessive; it could also be) Tj T* 0 Tw (irrelevant.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 225.0236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Locking) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 159.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL .911984 Tw (In May, 2006, the "Devicescape" networking stack was, with great fanfare, released under the GPL and) Tj T* 0 Tw .166651 Tw (made available for inclusion in the mainline kernel. This donation was welcome news; support for wireless) Tj T* 0 Tw .532126 Tw (networking in Linux was considered substandard at best, and the Devicescape stack offered the promise) Tj T* 0 Tw .906654 Tw (of fixing that situation. Yet, this code did not actually make it into the mainline until June, 2007 \(2.6.22\).) Tj T* 0 Tw (What happened?) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 105.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL 1.19311 Tw (This code showed a number of signs of having been developed behind corporate doors. But one large) Tj T* 0 Tw 2.759984 Tw (problem in particular was that it was not designed to work on multiprocessor systems. Before this) Tj T* 0 Tw .051984 Tw (networking stack \(now called mac80211\) could be merged, a locking scheme needed to be retrofitted onto) Tj T* 0 Tw (it.) Tj T* ET
Q
Q
 
endstream
endobj
32 0 obj
<< /Length 6301 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 705.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL .865984 Tw (Once upon a time, Linux kernel code could be developed without thinking about the concurrency issues) Tj T* 0 Tw 2.457674 Tw (presented by multiprocessor systems. Now, however, this document is being written on a dual-core) Tj T* 0 Tw .21784 Tw (laptop. Even on single-processor systems, work being done to improve responsiveness will raise the level) Tj T* 0 Tw 1.941984 Tw (of concurrency within the kernel. The days when kernel code could be written without thinking about) Tj T* 0 Tw (locking are long past.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 639.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL 1.175366 Tw (Any resource \(data structures, hardware registers, etc.\) which could be accessed concurrently by more) Tj T* 0 Tw .753876 Tw (than one thread must be protected by a lock. New code should be written with this requirement in mind;) Tj T* 0 Tw .929398 Tw (retrofitting locking after the fact is a rather more difficult task. Kernel developers should take the time to) Tj T* 0 Tw .014104 Tw (understand the available locking primitives well enough to pick the right tool for the job. Code which shows) Tj T* 0 Tw (a lack of attention to concurrency will have a difficult path into the mainline.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 609.0236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Regressions) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 543.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL 1.557209 Tw (One final hazard worth mentioning is this: it can be tempting to make a change \(which may bring big) Tj T* 0 Tw 2.351984 Tw (improvements\) which causes something to break for existing users. This kind of change is called a) Tj T* 0 Tw .329213 Tw ("regression," and regressions have become most unwelcome in the mainline kernel. With few exceptions,) Tj T* 0 Tw .341163 Tw (changes which cause regressions will be backed out if the regression cannot be fixed in a timely manner.) Tj T* 0 Tw (Far better to avoid the regression in the first place.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 501.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.566988 Tw (It is often argued that a regression can be justified if it causes things to work for more people than it) Tj T* 0 Tw .509988 Tw (creates problems for. Why not make a change if it brings new functionality to ten systems for each one it) Tj T* 0 Tw (breaks? The best answer to this question was expressed by Linus in July, 2007:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 431.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 60 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F4 10 Tf 12 TL (So we don't fix bugs by introducing new problems.  That way lies) Tj T* (madness, and nobody ever knows if you actually make any real) Tj T* (progress at all. Is it two steps forwards, one step back, or one) Tj T* (step forward and two steps back?) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 411.8236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (\() Tj 0 0 .501961 rg (http://lwn.net/Articles/243460/) Tj 0 0 0 rg (\).) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 345.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL 2.376235 Tw (An especially unwelcome type of regression is any sort of change to the user-space ABI. Once an) Tj T* 0 Tw .39561 Tw (interface has been exported to user space, it must be supported indefinitely. This fact makes the creation) Tj T* 0 Tw .060751 Tw (of user-space interfaces particularly challenging: since they cannot be changed in incompatible ways, they) Tj T* 0 Tw .59832 Tw (must be done right the first time. For this reason, a great deal of thought, clear documentation, and wide) Tj T* 0 Tw (review for user-space interfaces is always required.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 312.8236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Code checking tools) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 234.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 62 Tm /F1 10 Tf 12 TL .817988 Tw (For now, at least, the writing of error-free code remains an ideal that few of us can reach. What we can) Tj T* 0 Tw .485227 Tw (hope to do, though, is to catch and fix as many of those errors as possible before our code goes into the) Tj T* 0 Tw .70936 Tw (mainline kernel. To that end, the kernel developers have put together an impressive array of tools which) Tj T* 0 Tw .340574 Tw (can catch a wide variety of obscure problems in an automated way. Any problem caught by the computer) Tj T* 0 Tw .195703 Tw (is a problem which will not afflict a user later on, so it stands to reason that the automated tools should be) Tj T* 0 Tw (used whenever possible.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 168.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL .17881 Tw (The first step is simply to heed the warnings produced by the compiler. Contemporary versions of gcc can) Tj T* 0 Tw 1.958735 Tw (detect \(and warn about\) a large number of potential errors. Quite often, these warnings point to real) Tj T* 0 Tw 2.75784 Tw (problems. Code submitted for review should, as a rule, not produce any compiler warnings. When) Tj T* 0 Tw .021163 Tw (silencing warnings, take care to understand the real cause and try to avoid "fixes" which make the warning) Tj T* 0 Tw (go away without addressing its cause.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 138.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 6.353555 Tw (Note that not all compiler warnings are enabled by default. Build the kernel with "make) Tj T* 0 Tw (EXTRA_CFLAGS=-W" to get the full set.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 96.82362 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.325697 Tw (The kernel provides several configuration options which turn on debugging features; most of these are) Tj T* 0 Tw .443516 Tw (found in the "kernel hacking" submenu. Several of these options should be turned on for any kernel used) Tj T* 0 Tw (for development or testing purposes. In particular, you should turn on:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 90.82362 cm
Q
q
1 0 0 1 287.6378 78.82362 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
 
endstream
endobj
33 0 obj
<< /Length 7502 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 603.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 114 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL 3.353294 Tw (ENABLE_WARN_DEPRECATED, ENABLE_MUST_CHECK, and FRAME_WARN to get an) Tj T* 0 Tw .298651 Tw (extra set of warnings for problems like the use of deprecated interfaces or ignoring an important) Tj T* 0 Tw .703318 Tw (return value from a function. The output generated by these warnings can be verbose, but one) Tj T* 0 Tw (need not worry about warnings from other parts of the kernel.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 108 cm
Q
q
1 0 0 1 20 60 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL 1.115697 Tw (DEBUG_OBJECTS will add code to track the lifetime of various objects created by the kernel) Tj T* 0 Tw .458221 Tw (and warn when things are done out of order. If you are adding a subsystem which creates \(and) Tj T* 0 Tw 4.07748 Tw (exports\) complex objects of its own, consider adding support for the object debugging) Tj T* 0 Tw (infrastructure.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 54 cm
Q
q
1 0 0 1 20 30 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .002485 Tw (DEBUG_SLAB can find a variety of memory allocation and use errors; it should be used on most) Tj T* 0 Tw (development kernels.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 24 cm
Q
q
1 0 0 1 20 0 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .70622 Tw (DEBUG_SPINLOCK, DEBUG_ATOMIC_SLEEP, and DEBUG_MUTEXES will find a number of) Tj T* 0 Tw (common locking errors.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
q
1 0 0 1 62.69291 603.0236 cm
Q
q
1 0 0 1 62.69291 561.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.255868 Tw (There are quite a few other debugging options, some of which will be discussed below. Some of them) Tj T* 0 Tw 2.10528 Tw (have a significant performance impact and should not be used all of the time. But some time spent) Tj T* 0 Tw (learning the available options will likely be paid back many times over in short order.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 459.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 86 Tm /F1 10 Tf 12 TL .348221 Tw (One of the heavier debugging tools is the locking checker, or "lockdep." This tool will track the acquisition) Tj T* 0 Tw .354987 Tw (and release of every lock \(spinlock or mutex\) in the system, the order in which locks are acquired relative) Tj T* 0 Tw 1.993735 Tw (to each other, the current interrupt environment, and more. It can then ensure that locks are always) Tj T* 0 Tw .135542 Tw (acquired in the same order, that the same interrupt assumptions apply in all situations, and so on. In other) Tj T* 0 Tw 1.196235 Tw (words, lockdep can find a number of scenarios in which the system could, on rare occasion, deadlock.) Tj T* 0 Tw .341163 Tw (This kind of problem can be painful \(for both developers and users\) in a deployed system; lockdep allows) Tj T* 0 Tw .474987 Tw (them to be found in an automated manner ahead of time. Code with any sort of non-trivial locking should) Tj T* 0 Tw (be run with lockdep enabled before being submitted for inclusion.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 405.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .111751 Tw (As a diligent kernel programmer, you will, beyond doubt, check the return status of any operation \(such as) Tj T* 0 Tw .99528 Tw (a memory allocation\) which can fail. The fact of the matter, though, is that the resulting failure recovery) Tj T* 0 Tw 1.346651 Tw (paths are, probably, completely untested. Untested code tends to be broken code; you could be much) Tj T* 0 Tw (more confident of your code if all those error-handling paths had been exercised a few times.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 339.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL 2.163555 Tw (The kernel provides a fault injection framework which can do exactly that, especially where memory) Tj T* 0 Tw .233059 Tw (allocations are involved. With fault injection enabled, a configurable percentage of memory allocations will) Tj T* 0 Tw 1.031098 Tw (be made to fail; these failures can be restricted to a specific range of code. Running with fault injection) Tj T* 0 Tw 5.255697 Tw (enabled allows the programmer to see how the code responds when things go badly. See) Tj T* 0 Tw (Documentation/fault-injection/fault-injection.txt for more information on how to use this facility.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 261.0236 cm
q
BT 1 0 0 1 0 62 Tm .185868 Tw 12 TL /F1 10 Tf 0 0 0 rg (Other kinds of errors can be found with the "sparse" static analysis tool. With sparse, the programmer can) Tj T* 0 Tw .851647 Tw (be warned about confusion between user-space and kernel-space addresses, mixture of big-endian and) Tj T* 0 Tw 1.54881 Tw (small-endian quantities, the passing of integer values where a set of bit flags is expected, and so on.) Tj T* 0 Tw 25.40664 Tw (Sparse must be installed separately \(it can be found at) Tj T* 0 Tw .77816 Tw 0 0 .501961 rg (https://sparse.wiki.kernel.org/index.php/Main_Page ) Tj 0 0 0 rg (if your distributor does not package it\); it can then be) Tj T* 0 Tw (run on the code by adding "C=1" to your make command.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 195.0236 cm
q
BT 1 0 0 1 0 50 Tm .358651 Tw 12 TL /F1 10 Tf 0 0 0 rg (The "Coccinelle" tool \() Tj 0 0 .501961 rg (http://coccinelle.lip6.fr/) Tj 0 0 0 rg (\) is able to find a wide variety of potential coding problems; it) Tj T* 0 Tw 1.897485 Tw (can also propose fixes for those problems. Quite a few "semantic patches" for the kernel have been) Tj T* 0 Tw 3.571797 Tw (packaged under the scripts/coccinelle directory; running "make coccicheck" will run through those) Tj T* 0 Tw 4.164524 Tw (semantic patches and report on any problems found. See Documentation/coccinelle.txt for more) Tj T* 0 Tw (information.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 153.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .043876 Tw (Other kinds of portability errors are best found by compiling your code for other architectures. If you do not) Tj T* 0 Tw 2.236235 Tw (happen to have an S/390 system or a Blackfin development board handy, you can still perform the) Tj T* 0 Tw (compilation step. A large set of cross compilers for x86 systems can be found at) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 147.0236 cm
Q
q
1 0 0 1 62.69291 135.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (http://www.kernel.org/pub/tools/crosstool/) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 135.0236 cm
Q
q
1 0 0 1 62.69291 117.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Some time spent installing and using these compilers will help avoid embarrassment later.) Tj T* ET
Q
Q
 
endstream
endobj
34 0 obj
<< /Length 6587 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 744.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Documentation) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 690.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL 2.317126 Tw (Documentation has often been more the exception than the rule with kernel development. Even so,) Tj T* 0 Tw 1.05881 Tw (adequate documentation will help to ease the merging of new code into the kernel, make life easier for) Tj T* 0 Tw 1.298735 Tw (other developers, and will be helpful for your users. In many cases, the addition of documentation has) Tj T* 0 Tw (become essentially mandatory.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 624.0236 cm
q
BT 1 0 0 1 0 50 Tm .01311 Tw 12 TL /F1 10 Tf 0 0 0 rg (The first piece of documentation for any patch is its associated changelog. Log entries should describe the) Tj T* 0 Tw .534692 Tw (problem being solved, the form of the solution, the people who worked on the patch, any relevant effects) Tj T* 0 Tw 2.198735 Tw (on performance, and anything else that might be needed to understand the patch. Be sure that the) Tj T* 0 Tw 1.264985 Tw (changelog says ) Tj /F3 10 Tf (why ) Tj /F1 10 Tf (the patch is worth applying; a surprising number of developers fail to provide that) Tj T* 0 Tw (information.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 570.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL 1.617045 Tw (Any code which adds a new user-space interface - including new sysfs or /proc files - should include) Tj T* 0 Tw .135697 Tw (documentation of that interface which enables user-space developers to know what they are working with.) Tj T* 0 Tw 1.176647 Tw (See Documentation/ABI/README for a description of how this documentation should be formatted and) Tj T* 0 Tw (what information needs to be provided.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 528.0236 cm
q
BT 1 0 0 1 0 26 Tm 1.309966 Tw 12 TL /F1 10 Tf 0 0 0 rg (The file ) Tj 1 0 0 rg (:ref:`Documentation/admin-guide/kernel-parameters.rst <) Tj (kernelparameters) Tj (>) Tj (` ) Tj 0 0 0 rg (describes all of the) Tj T* 0 Tw .469982 Tw (kernel's boot-time parameters. Any patch which adds new parameters should add the appropriate entries) Tj T* 0 Tw (to this file.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 498.0236 cm
q
BT 1 0 0 1 0 14 Tm .755984 Tw 12 TL /F1 10 Tf 0 0 0 rg (Any new configuration options must be accompanied by help text which clearly explains the options and) Tj T* 0 Tw (when the user might want to select them.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 408.0236 cm
q
BT 1 0 0 1 0 74 Tm 1.41248 Tw 12 TL /F1 10 Tf 0 0 0 rg (Internal API information for many subsystems is documented by way of specially-formatted comments;) Tj T* 0 Tw .14332 Tw (these comments can be extracted and formatted in a number of ways by the "kernel-doc" script. If you are) Tj T* 0 Tw .424651 Tw (working within a subsystem which has kerneldoc comments, you should maintain them and add them, as) Tj T* 0 Tw .015697 Tw (appropriate, for externally-available functions. Even in areas which have not been so documented, there is) Tj T* 0 Tw .829986 Tw (no harm in adding kerneldoc comments for the future; indeed, this can be a useful activity for beginning) Tj T* 0 Tw 3.074269 Tw (kernel developers. The format of these comments, along with some information on how to create) Tj T* 0 Tw (kerneldoc templates can be found at ) Tj 1 0 0 rg (:ref:`Documentation/doc-guide/ <) Tj (doc_guide) Tj (>) Tj (`) Tj 0 0 0 rg (.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 342.0236 cm
q
BT 1 0 0 1 0 50 Tm .903984 Tw 12 TL /F1 10 Tf 0 0 0 rg (Anybody who reads through a significant amount of existing kernel code will note that, often, comments) Tj T* 0 Tw .469398 Tw (are most notable by their absence. Once again, the expectations for new code are higher than they were) Tj T* 0 Tw 5.277984 Tw (in the past; merging uncommented code will be harder. That said, there is little desire for) Tj T* 0 Tw 1.734147 Tw (verbosely-commented code. The code should, itself, be readable, with comments explaining the more) Tj T* 0 Tw (subtle aspects.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 276.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL .684651 Tw (Certain things should always be commented. Uses of memory barriers should be accompanied by a line) Tj T* 0 Tw 2.647318 Tw (explaining why the barrier is necessary. The locking rules for data structures generally need to be) Tj T* 0 Tw .079976 Tw (explained somewhere. Major data structures need comprehensive documentation in general. Non-obvious) Tj T* 0 Tw .827318 Tw (dependencies between separate bits of code should be pointed out. Anything which might tempt a code) Tj T* 0 Tw (janitor to make an incorrect "cleanup" needs a comment saying why it is done the way it is. And so on.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 243.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Internal API changes) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 177.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL .175868 Tw (The binary interface provided by the kernel to user space cannot be broken except under the most severe) Tj T* 0 Tw .128443 Tw (circumstances. The kernel's internal programming interfaces, instead, are highly fluid and can be changed) Tj T* 0 Tw 1.708409 Tw (when the need arises. If you find yourself having to work around a kernel API, or simply not using a) Tj T* 0 Tw 1.708876 Tw (specific functionality because it does not meet your needs, that may be a sign that the API needs to) Tj T* 0 Tw (change. As a kernel developer, you are empowered to make such changes.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 123.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .273672 Tw (There are, of course, some catches. API changes can be made, but they need to be well justified. So any) Tj T* 0 Tw .501751 Tw (patch making an internal API change should be accompanied by a description of what the change is and) Tj T* 0 Tw 1.462765 Tw (why it is necessary. This kind of change should also be broken out into a separate patch, rather than) Tj T* 0 Tw (buried within a larger patch.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 81.02362 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.339431 Tw (The other catch is that a developer who changes an internal API is generally charged with the task of) Tj T* 0 Tw .321654 Tw (fixing any code within the kernel tree which is broken by the change. For a widely-used function, this duty) Tj T* 0 Tw 1.434431 Tw (can lead to literally hundreds or thousands of changes - many of which are likely to conflict with work) Tj T* 0 Tw ET
Q
Q
 
endstream
endobj
35 0 obj
<< /Length 1082 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 741.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .488626 Tw (being done by other developers. Needless to say, this can be a large job, so it is best to be sure that the) Tj T* 0 Tw (justification is solid. Note that the Coccinelle tool can help with wide-ranging API changes.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 675.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL .809269 Tw (When making an incompatible API change, one should, whenever possible, ensure that code which has) Tj T* 0 Tw .760488 Tw (not been updated is caught by the compiler. This will help you to be sure that you have found all in-tree) Tj T* 0 Tw .244198 Tw (uses of that interface. It will also alert developers of out-of-tree code that there is a change that they need) Tj T* 0 Tw 1.458651 Tw (to respond to. Supporting out-of-tree code is not something that kernel developers need to be worried) Tj T* 0 Tw (about, but we also do not have to make life harder for out-of-tree developers than it needs to be.) Tj T* ET
Q
Q
 
endstream
endobj
36 0 obj
<< /Nums [ 0 37 0 R 1 38 0 R 2 39 0 R 3 40 0 R 4 41 0 R 
  5 42 0 R ] >>
endobj
37 0 obj
<< /S /D /St 1 >>
endobj
38 0 obj
<< /S /D /St 2 >>
endobj
39 0 obj
<< /S /D /St 3 >>
endobj
40 0 obj
<< /S /D /St 4 >>
endobj
41 0 obj
<< /S /D /St 5 >>
endobj
42 0 obj
<< /S /D /St 6 >>
endobj
xref
0 43
0000000000 65535 f
0000000075 00000 n
0000000139 00000 n
0000000249 00000 n
0000000364 00000 n
0000000573 00000 n
0000000691 00000 n
0000000900 00000 n
0000001008 00000 n
0000001194 00000 n
0000001421 00000 n
0000001627 00000 n
0000001809 00000 n
0000002007 00000 n
0000002250 00000 n
0000002460 00000 n
0000002670 00000 n
0000002779 00000 n
0000003012 00000 n
0000003090 00000 n
0000003242 00000 n
0000003358 00000 n
0000003493 00000 n
0000003648 00000 n
0000003781 00000 n
0000003905 00000 n
0000004020 00000 n
0000004156 00000 n
0000004287 00000 n
0000004412 00000 n
0000004508 00000 n
0000010646 00000 n
0000016863 00000 n
0000023221 00000 n
0000030780 00000 n
0000037424 00000 n
0000038563 00000 n
0000038656 00000 n
0000038693 00000 n
0000038730 00000 n
0000038767 00000 n
0000038804 00000 n
0000038841 00000 n
trailer
<< /ID 
 % ReportLab generated PDF document -- digest (http://www.reportlab.com)
 [(\327\220-\350\344\371\201\271\305k\304\330k\273;\205) (\327\220-\350\344\371\201\271\305k\304\330k\273;\205)]
 /Info 17 0 R /Root 16 0 R /Size 43 >>
startxref
38878
%%EOF
